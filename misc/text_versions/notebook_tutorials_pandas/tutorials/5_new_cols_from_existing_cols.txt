File path: ./notebook_tutorials_pandas/tutorials/5_new_cols_from_existing_cols.ipynb

# How To Create New Columns Derived From Existing Columns
![image.png](5_new_cols_from_existing_cols_files/54e5bc96-7270-4f04-9397-31d638f3acdc.png)


```python
import pandas as pd
```


```python
air_quality = pd.read_csv("../data/air_quality_no2.csv", index_col=0, parse_dates=True)

```


```python
air_quality.head()
```




<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
</style>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>station_antwerp</th>
      <th>station_paris</th>
      <th>station_london</th>
    </tr>
    <tr>
      <th>datetime</th>
      <th></th>
      <th></th>
      <th></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>2019-05-07 02:00:00</th>
      <td>NaN</td>
      <td>NaN</td>
      <td>23.0</td>
    </tr>
    <tr>
      <th>2019-05-07 03:00:00</th>
      <td>50.5</td>
      <td>25.0</td>
      <td>19.0</td>
    </tr>
    <tr>
      <th>2019-05-07 04:00:00</th>
      <td>45.0</td>
      <td>27.7</td>
      <td>19.0</td>
    </tr>
    <tr>
      <th>2019-05-07 05:00:00</th>
      <td>NaN</td>
      <td>50.4</td>
      <td>16.0</td>
    </tr>
    <tr>
      <th>2019-05-07 06:00:00</th>
      <td>NaN</td>
      <td>61.9</td>
      <td>NaN</td>
    </tr>
  </tbody>
</table>
</div>



Let's say that I want to express the NO<sub>2</sub> concentration of the station in London in mg m<sup>-3<sup>

(if we assume temp of 25 degs C & pressure 1013 hPa, the conversion factor is 1.882)


```python
air_quality["london_mg_per_cubic"] = air_quality["station_london"]*1.882
```


```python
air_quality.head()
```




<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
</style>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>station_antwerp</th>
      <th>station_paris</th>
      <th>station_london</th>
      <th>london_mg_per_cubic</th>
    </tr>
    <tr>
      <th>datetime</th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>2019-05-07 02:00:00</th>
      <td>NaN</td>
      <td>NaN</td>
      <td>23.0</td>
      <td>43.286</td>
    </tr>
    <tr>
      <th>2019-05-07 03:00:00</th>
      <td>50.5</td>
      <td>25.0</td>
      <td>19.0</td>
      <td>35.758</td>
    </tr>
    <tr>
      <th>2019-05-07 04:00:00</th>
      <td>45.0</td>
      <td>27.7</td>
      <td>19.0</td>
      <td>35.758</td>
    </tr>
    <tr>
      <th>2019-05-07 05:00:00</th>
      <td>NaN</td>
      <td>50.4</td>
      <td>16.0</td>
      <td>30.112</td>
    </tr>
    <tr>
      <th>2019-05-07 06:00:00</th>
      <td>NaN</td>
      <td>61.9</td>
      <td>NaN</td>
      <td>NaN</td>
    </tr>
  </tbody>
</table>
</div>



##### To create a new column, use the `[]` brackets with the new column name at the left side of the assignment.

**Note**:

The calculation of the values is done element-wise. This means all values in the given column are multiplied by the value 1.882 at once. You do not need to use a loop to iterate each of the rows!

![image.png](5_new_cols_from_existing_cols_files/de4d4a7a-cf35-4cd1-a913-11fb4a4d2bbe.png)

Now, I want to check the ratios of the values in Paris Vs. Antwerp and save the result in a new column


```python
air_quality["ratio_paris_antwerp"] = (
    air_quality["station_paris"]/air_quality["station_antwerp"]
)
```


```python
air_quality.head()
```




<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
</style>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>station_antwerp</th>
      <th>station_paris</th>
      <th>station_london</th>
      <th>london_mg_per_cubic</th>
      <th>ratio_paris_antwerp</th>
    </tr>
    <tr>
      <th>datetime</th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>2019-05-07 02:00:00</th>
      <td>NaN</td>
      <td>NaN</td>
      <td>23.0</td>
      <td>43.286</td>
      <td>NaN</td>
    </tr>
    <tr>
      <th>2019-05-07 03:00:00</th>
      <td>50.5</td>
      <td>25.0</td>
      <td>19.0</td>
      <td>35.758</td>
      <td>0.495050</td>
    </tr>
    <tr>
      <th>2019-05-07 04:00:00</th>
      <td>45.0</td>
      <td>27.7</td>
      <td>19.0</td>
      <td>35.758</td>
      <td>0.615556</td>
    </tr>
    <tr>
      <th>2019-05-07 05:00:00</th>
      <td>NaN</td>
      <td>50.4</td>
      <td>16.0</td>
      <td>30.112</td>
      <td>NaN</td>
    </tr>
    <tr>
      <th>2019-05-07 06:00:00</th>
      <td>NaN</td>
      <td>61.9</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
    </tr>
  </tbody>
</table>
</div>



The calculation is again *element-wise*, so the `/` is applied to each of the pairs of corresponding rows for paris and antwerp. 

Also other mathematical operators (`+`, `-`,`*`, `/`,…) or logical operators (`<`, `>`,`==`,…) work element-wise. The latter was already used in the subset data tutorial to filter rows of a table using a conditional expression.

If you want more *advanced* mathematical operation or logic, you caqn use arbitrary Python code via apply().

#### Now, I want to rename the data columns to the corresponding station identifiers used by OpenAQ.


```python
air_quality_renamed = air_quality.rename(
    columns={
            "station_antwerp": "BETR801",
            "station_paris": "FR04014",
            "station_london": "London Westminster",
        }
)
```


```python
air_quality_renamed.head()

```




<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
</style>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>BETR801</th>
      <th>FR04014</th>
      <th>London Westminster</th>
      <th>london_mg_per_cubic</th>
      <th>ratio_paris_antwerp</th>
    </tr>
    <tr>
      <th>datetime</th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>2019-05-07 02:00:00</th>
      <td>NaN</td>
      <td>NaN</td>
      <td>23.0</td>
      <td>43.286</td>
      <td>NaN</td>
    </tr>
    <tr>
      <th>2019-05-07 03:00:00</th>
      <td>50.5</td>
      <td>25.0</td>
      <td>19.0</td>
      <td>35.758</td>
      <td>0.495050</td>
    </tr>
    <tr>
      <th>2019-05-07 04:00:00</th>
      <td>45.0</td>
      <td>27.7</td>
      <td>19.0</td>
      <td>35.758</td>
      <td>0.615556</td>
    </tr>
    <tr>
      <th>2019-05-07 05:00:00</th>
      <td>NaN</td>
      <td>50.4</td>
      <td>16.0</td>
      <td>30.112</td>
      <td>NaN</td>
    </tr>
    <tr>
      <th>2019-05-07 06:00:00</th>
      <td>NaN</td>
      <td>61.9</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
    </tr>
  </tbody>
</table>
</div>



The `rename()` function can be used for both row labels and column labels. Provide a dicitonary with the keys as the currentnames and the values as the corresponding new column names.
> The mapping doesn't have to be restricted to fixed names only, but can be a mapping function as well. For example, converting the column names to lowercase letters can be done using a function as well:


```python
air_quality_renamed = air_quality_renamed.rename(columns=str.lower)
```


```python
air_quality_renamed.head()
```




<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
</style>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>betr801</th>
      <th>fr04014</th>
      <th>london westminster</th>
      <th>london_mg_per_cubic</th>
      <th>ratio_paris_antwerp</th>
    </tr>
    <tr>
      <th>datetime</th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>2019-05-07 02:00:00</th>
      <td>NaN</td>
      <td>NaN</td>
      <td>23.0</td>
      <td>43.286</td>
      <td>NaN</td>
    </tr>
    <tr>
      <th>2019-05-07 03:00:00</th>
      <td>50.5</td>
      <td>25.0</td>
      <td>19.0</td>
      <td>35.758</td>
      <td>0.495050</td>
    </tr>
    <tr>
      <th>2019-05-07 04:00:00</th>
      <td>45.0</td>
      <td>27.7</td>
      <td>19.0</td>
      <td>35.758</td>
      <td>0.615556</td>
    </tr>
    <tr>
      <th>2019-05-07 05:00:00</th>
      <td>NaN</td>
      <td>50.4</td>
      <td>16.0</td>
      <td>30.112</td>
      <td>NaN</td>
    </tr>
    <tr>
      <th>2019-05-07 06:00:00</th>
      <td>NaN</td>
      <td>61.9</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
    </tr>
  </tbody>
</table>
</div>



## REMEMBER
* Create a new column by assigning the output to the DataFrame with a new column name in between the `[]`.

* Operations are element-wise, no need to loop over rows.

* Use `rename()` with a dictionary or function argument to rename row labels or column names.


```python

```


```python

```
