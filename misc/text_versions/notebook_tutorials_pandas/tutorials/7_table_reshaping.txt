File path: ./notebook_tutorials_pandas/tutorials/7_table_reshaping.ipynb

# How to reshape the layout of tables

## Sort table rows

First, let's import pandas as pd and load in our data for air quality and titanic 


```python
import pandas as pd

```


```python
titanic = pd.read_csv("../data/titanic.csv")
```


```python
titanic.head()
```




<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
</style>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>PassengerId</th>
      <th>Survived</th>
      <th>Pclass</th>
      <th>Name</th>
      <th>Sex</th>
      <th>Age</th>
      <th>SibSp</th>
      <th>Parch</th>
      <th>Ticket</th>
      <th>Fare</th>
      <th>Cabin</th>
      <th>Embarked</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>1</td>
      <td>0</td>
      <td>3</td>
      <td>Braund, Mr. Owen Harris</td>
      <td>male</td>
      <td>22.0</td>
      <td>1</td>
      <td>0</td>
      <td>A/5 21171</td>
      <td>7.2500</td>
      <td>NaN</td>
      <td>S</td>
    </tr>
    <tr>
      <th>1</th>
      <td>2</td>
      <td>1</td>
      <td>1</td>
      <td>Cumings, Mrs. John Bradley (Florence Briggs Th...</td>
      <td>female</td>
      <td>38.0</td>
      <td>1</td>
      <td>0</td>
      <td>PC 17599</td>
      <td>71.2833</td>
      <td>C85</td>
      <td>C</td>
    </tr>
    <tr>
      <th>2</th>
      <td>3</td>
      <td>1</td>
      <td>3</td>
      <td>Heikkinen, Miss Laina</td>
      <td>female</td>
      <td>26.0</td>
      <td>0</td>
      <td>0</td>
      <td>STON/O2. 3101282</td>
      <td>7.9250</td>
      <td>NaN</td>
      <td>S</td>
    </tr>
    <tr>
      <th>3</th>
      <td>4</td>
      <td>1</td>
      <td>1</td>
      <td>Futrelle, Mrs. Jacques Heath (Lily May Peel)</td>
      <td>female</td>
      <td>35.0</td>
      <td>1</td>
      <td>0</td>
      <td>113803</td>
      <td>53.1000</td>
      <td>C123</td>
      <td>S</td>
    </tr>
    <tr>
      <th>4</th>
      <td>5</td>
      <td>0</td>
      <td>3</td>
      <td>Allen, Mr. William Henry</td>
      <td>male</td>
      <td>35.0</td>
      <td>0</td>
      <td>0</td>
      <td>373450</td>
      <td>8.0500</td>
      <td>NaN</td>
      <td>S</td>
    </tr>
  </tbody>
</table>
</div>




```python
air_quality = pd.read_csv("../data/air_quality_long.csv", index_col="date.utc", parse_dates=True)
```


```python
air_quality.head()
```




<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
</style>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>city</th>
      <th>country</th>
      <th>location</th>
      <th>parameter</th>
      <th>value</th>
      <th>unit</th>
    </tr>
    <tr>
      <th>date.utc</th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>2019-06-18 06:00:00+00:00</th>
      <td>Antwerpen</td>
      <td>BE</td>
      <td>BETR801</td>
      <td>pm25</td>
      <td>18.0</td>
      <td>µg/m³</td>
    </tr>
    <tr>
      <th>2019-06-17 08:00:00+00:00</th>
      <td>Antwerpen</td>
      <td>BE</td>
      <td>BETR801</td>
      <td>pm25</td>
      <td>6.5</td>
      <td>µg/m³</td>
    </tr>
    <tr>
      <th>2019-06-17 07:00:00+00:00</th>
      <td>Antwerpen</td>
      <td>BE</td>
      <td>BETR801</td>
      <td>pm25</td>
      <td>18.5</td>
      <td>µg/m³</td>
    </tr>
    <tr>
      <th>2019-06-17 06:00:00+00:00</th>
      <td>Antwerpen</td>
      <td>BE</td>
      <td>BETR801</td>
      <td>pm25</td>
      <td>16.0</td>
      <td>µg/m³</td>
    </tr>
    <tr>
      <th>2019-06-17 05:00:00+00:00</th>
      <td>Antwerpen</td>
      <td>BE</td>
      <td>BETR801</td>
      <td>pm25</td>
      <td>7.5</td>
      <td>µg/m³</td>
    </tr>
  </tbody>
</table>
</div>



Let's say that we want to *sort* Titanic data according to the age of the passengers.

We can use the `sort_values()` method.


```python
titanic.sort_values(by="Age").head(10)
```




<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
</style>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>PassengerId</th>
      <th>Survived</th>
      <th>Pclass</th>
      <th>Name</th>
      <th>Sex</th>
      <th>Age</th>
      <th>SibSp</th>
      <th>Parch</th>
      <th>Ticket</th>
      <th>Fare</th>
      <th>Cabin</th>
      <th>Embarked</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>803</th>
      <td>804</td>
      <td>1</td>
      <td>3</td>
      <td>Thomas, Master Assad Alexander</td>
      <td>male</td>
      <td>0.42</td>
      <td>0</td>
      <td>1</td>
      <td>2625</td>
      <td>8.5167</td>
      <td>NaN</td>
      <td>C</td>
    </tr>
    <tr>
      <th>755</th>
      <td>756</td>
      <td>1</td>
      <td>2</td>
      <td>Hamalainen, Master Viljo</td>
      <td>male</td>
      <td>0.67</td>
      <td>1</td>
      <td>1</td>
      <td>250649</td>
      <td>14.5000</td>
      <td>NaN</td>
      <td>S</td>
    </tr>
    <tr>
      <th>644</th>
      <td>645</td>
      <td>1</td>
      <td>3</td>
      <td>Baclini, Miss Eugenie</td>
      <td>female</td>
      <td>0.75</td>
      <td>2</td>
      <td>1</td>
      <td>2666</td>
      <td>19.2583</td>
      <td>NaN</td>
      <td>C</td>
    </tr>
    <tr>
      <th>469</th>
      <td>470</td>
      <td>1</td>
      <td>3</td>
      <td>Baclini, Miss Helene Barbara</td>
      <td>female</td>
      <td>0.75</td>
      <td>2</td>
      <td>1</td>
      <td>2666</td>
      <td>19.2583</td>
      <td>NaN</td>
      <td>C</td>
    </tr>
    <tr>
      <th>78</th>
      <td>79</td>
      <td>1</td>
      <td>2</td>
      <td>Caldwell, Master Alden Gates</td>
      <td>male</td>
      <td>0.83</td>
      <td>0</td>
      <td>2</td>
      <td>248738</td>
      <td>29.0000</td>
      <td>NaN</td>
      <td>S</td>
    </tr>
    <tr>
      <th>831</th>
      <td>832</td>
      <td>1</td>
      <td>2</td>
      <td>Richards, Master George Sibley</td>
      <td>male</td>
      <td>0.83</td>
      <td>1</td>
      <td>1</td>
      <td>29106</td>
      <td>18.7500</td>
      <td>NaN</td>
      <td>S</td>
    </tr>
    <tr>
      <th>305</th>
      <td>306</td>
      <td>1</td>
      <td>1</td>
      <td>Allison, Master Hudson Trevor</td>
      <td>male</td>
      <td>0.92</td>
      <td>1</td>
      <td>2</td>
      <td>113781</td>
      <td>151.5500</td>
      <td>C22 C26</td>
      <td>S</td>
    </tr>
    <tr>
      <th>827</th>
      <td>828</td>
      <td>1</td>
      <td>2</td>
      <td>Mallet, Master Andre</td>
      <td>male</td>
      <td>1.00</td>
      <td>0</td>
      <td>2</td>
      <td>S.C./PARIS 2079</td>
      <td>37.0042</td>
      <td>NaN</td>
      <td>C</td>
    </tr>
    <tr>
      <th>381</th>
      <td>382</td>
      <td>1</td>
      <td>3</td>
      <td>Nakid, Miss Maria ("Mary")</td>
      <td>female</td>
      <td>1.00</td>
      <td>0</td>
      <td>2</td>
      <td>2653</td>
      <td>15.7417</td>
      <td>NaN</td>
      <td>C</td>
    </tr>
    <tr>
      <th>164</th>
      <td>165</td>
      <td>0</td>
      <td>3</td>
      <td>Panula, Master Eino Viljami</td>
      <td>male</td>
      <td>1.00</td>
      <td>4</td>
      <td>1</td>
      <td>3101295</td>
      <td>39.6875</td>
      <td>NaN</td>
      <td>S</td>
    </tr>
  </tbody>
</table>
</div>



Now, let's say that we want to sort the Titanic data according to the cabin class and age in descending order. 


```python
titanic.sort_values(by=['Pclass', 'Age'], ascending=False).head()
```




<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
</style>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>PassengerId</th>
      <th>Survived</th>
      <th>Pclass</th>
      <th>Name</th>
      <th>Sex</th>
      <th>Age</th>
      <th>SibSp</th>
      <th>Parch</th>
      <th>Ticket</th>
      <th>Fare</th>
      <th>Cabin</th>
      <th>Embarked</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>851</th>
      <td>852</td>
      <td>0</td>
      <td>3</td>
      <td>Svensson, Mr. Johan</td>
      <td>male</td>
      <td>74.0</td>
      <td>0</td>
      <td>0</td>
      <td>347060</td>
      <td>7.7750</td>
      <td>NaN</td>
      <td>S</td>
    </tr>
    <tr>
      <th>116</th>
      <td>117</td>
      <td>0</td>
      <td>3</td>
      <td>Connors, Mr. Patrick</td>
      <td>male</td>
      <td>70.5</td>
      <td>0</td>
      <td>0</td>
      <td>370369</td>
      <td>7.7500</td>
      <td>NaN</td>
      <td>Q</td>
    </tr>
    <tr>
      <th>280</th>
      <td>281</td>
      <td>0</td>
      <td>3</td>
      <td>Duane, Mr. Frank</td>
      <td>male</td>
      <td>65.0</td>
      <td>0</td>
      <td>0</td>
      <td>336439</td>
      <td>7.7500</td>
      <td>NaN</td>
      <td>Q</td>
    </tr>
    <tr>
      <th>483</th>
      <td>484</td>
      <td>1</td>
      <td>3</td>
      <td>Turkula, Mrs. (Hedwig)</td>
      <td>female</td>
      <td>63.0</td>
      <td>0</td>
      <td>0</td>
      <td>4134</td>
      <td>9.5875</td>
      <td>NaN</td>
      <td>S</td>
    </tr>
    <tr>
      <th>326</th>
      <td>327</td>
      <td>0</td>
      <td>3</td>
      <td>Nysveen, Mr. Johan Hansen</td>
      <td>male</td>
      <td>61.0</td>
      <td>0</td>
      <td>0</td>
      <td>345364</td>
      <td>6.2375</td>
      <td>NaN</td>
      <td>S</td>
    </tr>
  </tbody>
</table>
</div>



**NOTE:** with `DataFrame.sort_values()` the rows in the table are sorted according to the defined column(s). The index will follow the row order. 

More details about sorting of tables is provided in the user guide section on <a href="https://pandas.pydata.org/docs/user_guide/basics.html#basics-sorting">sorting data</a>.

## Long to Wide Table Format

Let's use a *small subset* of the air quality data set. We focus only on **NO<sub>**2**</sub>** and only use the first two measurements of each location (i.e. the head(2) of each group). The subset of data will be called no2_subset.


```python
#filter for no2 data only
no2 = air_quality[air_quality["parameter"] == "no2"]
no2
```




<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
</style>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>city</th>
      <th>country</th>
      <th>location</th>
      <th>parameter</th>
      <th>value</th>
      <th>unit</th>
    </tr>
    <tr>
      <th>date.utc</th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>2019-06-21 00:00:00+00:00</th>
      <td>Paris</td>
      <td>FR</td>
      <td>FR04014</td>
      <td>no2</td>
      <td>20.0</td>
      <td>µg/m³</td>
    </tr>
    <tr>
      <th>2019-06-20 23:00:00+00:00</th>
      <td>Paris</td>
      <td>FR</td>
      <td>FR04014</td>
      <td>no2</td>
      <td>21.8</td>
      <td>µg/m³</td>
    </tr>
    <tr>
      <th>2019-06-20 22:00:00+00:00</th>
      <td>Paris</td>
      <td>FR</td>
      <td>FR04014</td>
      <td>no2</td>
      <td>26.5</td>
      <td>µg/m³</td>
    </tr>
    <tr>
      <th>2019-06-20 21:00:00+00:00</th>
      <td>Paris</td>
      <td>FR</td>
      <td>FR04014</td>
      <td>no2</td>
      <td>24.9</td>
      <td>µg/m³</td>
    </tr>
    <tr>
      <th>2019-06-20 20:00:00+00:00</th>
      <td>Paris</td>
      <td>FR</td>
      <td>FR04014</td>
      <td>no2</td>
      <td>21.4</td>
      <td>µg/m³</td>
    </tr>
    <tr>
      <th>...</th>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
    </tr>
    <tr>
      <th>2019-04-09 06:00:00+00:00</th>
      <td>London</td>
      <td>GB</td>
      <td>London Westminster</td>
      <td>no2</td>
      <td>41.0</td>
      <td>µg/m³</td>
    </tr>
    <tr>
      <th>2019-04-09 05:00:00+00:00</th>
      <td>London</td>
      <td>GB</td>
      <td>London Westminster</td>
      <td>no2</td>
      <td>41.0</td>
      <td>µg/m³</td>
    </tr>
    <tr>
      <th>2019-04-09 04:00:00+00:00</th>
      <td>London</td>
      <td>GB</td>
      <td>London Westminster</td>
      <td>no2</td>
      <td>41.0</td>
      <td>µg/m³</td>
    </tr>
    <tr>
      <th>2019-04-09 03:00:00+00:00</th>
      <td>London</td>
      <td>GB</td>
      <td>London Westminster</td>
      <td>no2</td>
      <td>67.0</td>
      <td>µg/m³</td>
    </tr>
    <tr>
      <th>2019-04-09 02:00:00+00:00</th>
      <td>London</td>
      <td>GB</td>
      <td>London Westminster</td>
      <td>no2</td>
      <td>67.0</td>
      <td>µg/m³</td>
    </tr>
  </tbody>
</table>
<p>3447 rows × 6 columns</p>
</div>




```python
# use 2 measurements (head) for each location (groupby)
no2_subset = no2.sort_index().groupby(["location"]).head(2)


```


```python
no2_subset
```




<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
</style>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>city</th>
      <th>country</th>
      <th>location</th>
      <th>parameter</th>
      <th>value</th>
      <th>unit</th>
    </tr>
    <tr>
      <th>date.utc</th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>2019-04-09 01:00:00+00:00</th>
      <td>Antwerpen</td>
      <td>BE</td>
      <td>BETR801</td>
      <td>no2</td>
      <td>22.5</td>
      <td>µg/m³</td>
    </tr>
    <tr>
      <th>2019-04-09 01:00:00+00:00</th>
      <td>Paris</td>
      <td>FR</td>
      <td>FR04014</td>
      <td>no2</td>
      <td>24.4</td>
      <td>µg/m³</td>
    </tr>
    <tr>
      <th>2019-04-09 02:00:00+00:00</th>
      <td>London</td>
      <td>GB</td>
      <td>London Westminster</td>
      <td>no2</td>
      <td>67.0</td>
      <td>µg/m³</td>
    </tr>
    <tr>
      <th>2019-04-09 02:00:00+00:00</th>
      <td>Antwerpen</td>
      <td>BE</td>
      <td>BETR801</td>
      <td>no2</td>
      <td>53.5</td>
      <td>µg/m³</td>
    </tr>
    <tr>
      <th>2019-04-09 02:00:00+00:00</th>
      <td>Paris</td>
      <td>FR</td>
      <td>FR04014</td>
      <td>no2</td>
      <td>27.4</td>
      <td>µg/m³</td>
    </tr>
    <tr>
      <th>2019-04-09 03:00:00+00:00</th>
      <td>London</td>
      <td>GB</td>
      <td>London Westminster</td>
      <td>no2</td>
      <td>67.0</td>
      <td>µg/m³</td>
    </tr>
  </tbody>
</table>
</div>



![image.png](7_table_reshaping_files/d17759b0-c8c6-4cbd-ba34-61c88c3c2571.png)

I want the values for the three stations as separate columns next to each other. 


```python
no2_subset.pivot(columns="location",values="value")
```




<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
</style>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th>location</th>
      <th>BETR801</th>
      <th>FR04014</th>
      <th>London Westminster</th>
    </tr>
    <tr>
      <th>date.utc</th>
      <th></th>
      <th></th>
      <th></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>2019-04-09 01:00:00+00:00</th>
      <td>22.5</td>
      <td>24.4</td>
      <td>NaN</td>
    </tr>
    <tr>
      <th>2019-04-09 02:00:00+00:00</th>
      <td>53.5</td>
      <td>27.4</td>
      <td>67.0</td>
    </tr>
    <tr>
      <th>2019-04-09 03:00:00+00:00</th>
      <td>NaN</td>
      <td>NaN</td>
      <td>67.0</td>
    </tr>
  </tbody>
</table>
</div>



The `pivot()` function is purely reshaping of the data: a single value for each index/column combination  is *required*


```python
no2.head()
```




<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
</style>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>city</th>
      <th>country</th>
      <th>location</th>
      <th>parameter</th>
      <th>value</th>
      <th>unit</th>
    </tr>
    <tr>
      <th>date.utc</th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>2019-06-21 00:00:00+00:00</th>
      <td>Paris</td>
      <td>FR</td>
      <td>FR04014</td>
      <td>no2</td>
      <td>20.0</td>
      <td>µg/m³</td>
    </tr>
    <tr>
      <th>2019-06-20 23:00:00+00:00</th>
      <td>Paris</td>
      <td>FR</td>
      <td>FR04014</td>
      <td>no2</td>
      <td>21.8</td>
      <td>µg/m³</td>
    </tr>
    <tr>
      <th>2019-06-20 22:00:00+00:00</th>
      <td>Paris</td>
      <td>FR</td>
      <td>FR04014</td>
      <td>no2</td>
      <td>26.5</td>
      <td>µg/m³</td>
    </tr>
    <tr>
      <th>2019-06-20 21:00:00+00:00</th>
      <td>Paris</td>
      <td>FR</td>
      <td>FR04014</td>
      <td>no2</td>
      <td>24.9</td>
      <td>µg/m³</td>
    </tr>
    <tr>
      <th>2019-06-20 20:00:00+00:00</th>
      <td>Paris</td>
      <td>FR</td>
      <td>FR04014</td>
      <td>no2</td>
      <td>21.4</td>
      <td>µg/m³</td>
    </tr>
  </tbody>
</table>
</div>




```python
no2.pivot(columns="location", values="value").plot()
```




    <Axes: xlabel='date.utc'>




    
![png](7_table_reshaping_files/7_table_reshaping_21_1.png)
    


When the `index` parameter is not defined, the existing index (row labels) is used.

For more information about `pivot()`, see the user guide section on <a href ="https://pandas.pydata.org/docs/user_guide/reshaping.html#reshaping-reshaping">pivoting DataFrame objects</a>.

## Pivot table
![image.png](7_table_reshaping_files/6da8dbfd-dedf-4894-aa50-80b06d5b6ff5.png)


I want the mean concentrations for NO<sub>2</sub> &  PM<sub>2.5</sub>
 in each of the stations in table form.


```python
air_quality.pivot_table(
    values="value", index="location", columns="parameter", aggfunc="mean"
)
```




<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
</style>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th>parameter</th>
      <th>no2</th>
      <th>pm25</th>
    </tr>
    <tr>
      <th>location</th>
      <th></th>
      <th></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>BETR801</th>
      <td>26.950920</td>
      <td>23.169492</td>
    </tr>
    <tr>
      <th>FR04014</th>
      <td>29.374284</td>
      <td>NaN</td>
    </tr>
    <tr>
      <th>London Westminster</th>
      <td>29.740050</td>
      <td>13.443568</td>
    </tr>
  </tbody>
</table>
</div>



* In this case, the data is only rearranged. When multiple values need to be aggregated (in this specific case, the values on different time steps), `pivot_table()` can be used, providing an aggregation function (e.g. `mean()`) on how to combine these values.
* Pivot table is a well-known concept in spreadsheet software. When interested in the rowcolumn margins (subtotals) for each variable, set the margins parameter to `True`:


```python
air_quality.pivot_table(
    values="value",
    index="location",
    columns="parameter",
    aggfunc="mean",
    margins=True
)
```




<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
</style>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th>parameter</th>
      <th>no2</th>
      <th>pm25</th>
      <th>All</th>
    </tr>
    <tr>
      <th>location</th>
      <th></th>
      <th></th>
      <th></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>BETR801</th>
      <td>26.950920</td>
      <td>23.169492</td>
      <td>24.982353</td>
    </tr>
    <tr>
      <th>FR04014</th>
      <td>29.374284</td>
      <td>NaN</td>
      <td>29.374284</td>
    </tr>
    <tr>
      <th>London Westminster</th>
      <td>29.740050</td>
      <td>13.443568</td>
      <td>21.491708</td>
    </tr>
    <tr>
      <th>All</th>
      <td>29.430316</td>
      <td>14.386849</td>
      <td>24.222743</td>
    </tr>
  </tbody>
</table>
</div>



For more information about pivot_table(), see the user guide section on <a href="https://pandas.pydata.org/docs/user_guide/reshaping.html#reshaping-pivot">pivot tables</a>.

#### NOTE: 
In case you are wondering, `pivot_table()`is indeed directly linked to `groupby()`. The same result can be derived by grouping on both `parameter` and `location`:


```python
air_quality.groupby(["parameter", "location"])[["value"]].mean()
```




<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
</style>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th></th>
      <th>value</th>
    </tr>
    <tr>
      <th>parameter</th>
      <th>location</th>
      <th></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th rowspan="3" valign="top">no2</th>
      <th>BETR801</th>
      <td>26.950920</td>
    </tr>
    <tr>
      <th>FR04014</th>
      <td>29.374284</td>
    </tr>
    <tr>
      <th>London Westminster</th>
      <td>29.740050</td>
    </tr>
    <tr>
      <th rowspan="2" valign="top">pm25</th>
      <th>BETR801</th>
      <td>23.169492</td>
    </tr>
    <tr>
      <th>London Westminster</th>
      <td>13.443568</td>
    </tr>
  </tbody>
</table>
</div>



## Wide to long format
* Starting again from the wide format table created in the previous section, we add a new index to the `DataFrame` with `reset_index()`.


```python
no2_pivoted = no2.pivot(columns="location", values="value").reset_index()
```


```python
no2_pivoted.head()
```




<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
</style>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th>location</th>
      <th>date.utc</th>
      <th>BETR801</th>
      <th>FR04014</th>
      <th>London Westminster</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>2019-04-09 01:00:00+00:00</td>
      <td>22.5</td>
      <td>24.4</td>
      <td>NaN</td>
    </tr>
    <tr>
      <th>1</th>
      <td>2019-04-09 02:00:00+00:00</td>
      <td>53.5</td>
      <td>27.4</td>
      <td>67.0</td>
    </tr>
    <tr>
      <th>2</th>
      <td>2019-04-09 03:00:00+00:00</td>
      <td>54.5</td>
      <td>34.2</td>
      <td>67.0</td>
    </tr>
    <tr>
      <th>3</th>
      <td>2019-04-09 04:00:00+00:00</td>
      <td>34.5</td>
      <td>48.5</td>
      <td>41.0</td>
    </tr>
    <tr>
      <th>4</th>
      <td>2019-04-09 05:00:00+00:00</td>
      <td>46.5</td>
      <td>59.5</td>
      <td>41.0</td>
    </tr>
  </tbody>
</table>
</div>



![image.png](7_table_reshaping_files/49fca89c-7375-4dbf-a8cb-36603eb9e673.png)

Now, let's say we want to collect all air quality data NO<sub>2</sub> measurements in a single column (long format).


```python
no_2= no2_pivoted.melt(id_vars="date.utc")
no_2.head()
```




<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
</style>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>date.utc</th>
      <th>location</th>
      <th>value</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>2019-04-09 01:00:00+00:00</td>
      <td>BETR801</td>
      <td>22.5</td>
    </tr>
    <tr>
      <th>1</th>
      <td>2019-04-09 02:00:00+00:00</td>
      <td>BETR801</td>
      <td>53.5</td>
    </tr>
    <tr>
      <th>2</th>
      <td>2019-04-09 03:00:00+00:00</td>
      <td>BETR801</td>
      <td>54.5</td>
    </tr>
    <tr>
      <th>3</th>
      <td>2019-04-09 04:00:00+00:00</td>
      <td>BETR801</td>
      <td>34.5</td>
    </tr>
    <tr>
      <th>4</th>
      <td>2019-04-09 05:00:00+00:00</td>
      <td>BETR801</td>
      <td>46.5</td>
    </tr>
  </tbody>
</table>
</div>



The `pandas.melt()` method on a `DataFrame` converts the data table from wide format to long format. <br> And, the column headers become the variable names in a newly created column.

* The solution is the short version of on how to apply `pandas.melt()`. The method will _**melt**_ all columns NOT mentioned in id_vars together into two columns:
    * A column with the column header names
    * And, a column with the values itself  - this column (the latter), gets the name `value` by default.

  <br>

* The parameters passed to `pandas.melt()` can be defined in more detail:


```python
no_2 = no2_pivoted.melt(
    id_vars="date.utc",
    value_vars=["BETR801", "FR04014", "London Westminster"],
    value_name="NO_2",
    var_name="id_location",
)
```


```python
no_2.head()

```




<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
</style>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>date.utc</th>
      <th>id_location</th>
      <th>NO_2</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>2019-04-09 01:00:00+00:00</td>
      <td>BETR801</td>
      <td>22.5</td>
    </tr>
    <tr>
      <th>1</th>
      <td>2019-04-09 02:00:00+00:00</td>
      <td>BETR801</td>
      <td>53.5</td>
    </tr>
    <tr>
      <th>2</th>
      <td>2019-04-09 03:00:00+00:00</td>
      <td>BETR801</td>
      <td>54.5</td>
    </tr>
    <tr>
      <th>3</th>
      <td>2019-04-09 04:00:00+00:00</td>
      <td>BETR801</td>
      <td>34.5</td>
    </tr>
    <tr>
      <th>4</th>
      <td>2019-04-09 05:00:00+00:00</td>
      <td>BETR801</td>
      <td>46.5</td>
    </tr>
  </tbody>
</table>
</div>



#### NOTE: 

The additional parameters have the following effects:

* `value_vars` defines which columns to melt together (stack)
* `value_name` provides a custom **column name** for the values column instead of the default name `value`.
* `var_name` provides a custom column name for the column collecting the column header names.
    * Otherwise, it takes the index name or a default `variable`.
 
* Therefore, the arguments `value_name` and `var_name` are just arbitrarily defined names for the two generated columns. The columns to melt are defined by `id_vars` and `value_vars`.

## REMEMBER:
* Sorting by one or more columns is supported by `sort_values`
* The `pivot` function is `purely restructuring of the data, `pivot_table` supports aggregations.
* The reverse of `pivot` (long to wide format) is `melt` (wide to long format).

A full overview is available in the `pandas` user guide on the pages about <a href="https://pandas.pydata.org/docs/user_guide/reshaping.html#reshaping">reshaping and pivoting</a>.


```python

```
